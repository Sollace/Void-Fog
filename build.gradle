plugins {
    id 'java-library'
    id 'fabric-loom' version '0.8-SNAPSHOT'
    id 'maven-publish'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(16)
    }
}

def createVersion() {
    def parts = []

    if (project.release != 'RELEASE') {
        parts.push project.release
    }

    def branch = System.env.TRAVIS_BRANCH

    if (branch != null && branch != 'master' && !project.minecraft_version.startsWith(branch)) {
        parts.push branch
    }

    parts.push project.minecraft_version

    def ver = project.version
    if (parts.size > 0) {
      return ver + '-' + parts.join('-')
    }
    return ver
}

version = createVersion()
group = project.group
description = project.displayname
archivesBaseName = project.name

minecraft {
    refmapName = 'voidfog.mixin.refmap.json'
}

// check for updates every build when on CI
if (System.env.CI) {
    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
}

repositories {
    maven {
        name = 'modmenu'
        url = 'https://maven.terraformersmc.com/releases'
    }
    maven {
        name = 'minelp'
        url = 'https://repo.minelittlepony-mod.com/maven/snapshot'
    }
    maven {
        name = 'minelp-release'
        url = 'https://repo.minelittlepony-mod.com/maven/release'
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}"
    modApi "net.fabricmc:fabric-loader:${project.loader_version}"

    modApi fabricApi.module("fabric-api-base", project.fabric_version)
    modApi fabricApi.module("fabric-lifecycle-events-v1", project.fabric_version)
    modApi fabricApi.module("fabric-resource-loader-v0", project.fabric_version)

    modApi "com.minelittlepony:Kirin:${project.kirin_version}"
    include "com.minelittlepony:Kirin:${project.kirin_version}"

    modCompileOnly("com.terraformersmc:modmenu:${project.modmenu_version}")
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }

    from 'LICENSE'
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}
